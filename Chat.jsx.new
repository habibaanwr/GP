// filepath: f:\University\GP Final\Frontend\src\pages\Chat\Chat.jsx
import React, { useState, useContext, useEffect, useRef } from 'react';
import { SessionContext } from '../../context/SessionContext';
import { FaUserCircle, FaRobot, FaTrash, FaSync, FaExclamationTriangle } from 'react-icons/fa';
import { askQuestionWithRetry, handleApiError, getConnectionState, recoverApiConnection } from '../../services/chatApi';
import './Chat.css';
import './typing-indicator.css';

const Chat = () => {
  const { summary, documentId } = useContext(SessionContext);  const [messages, setMessages] = useState(() => {
    // Try to get messages from sessionStorage first
    const sessionMessages = sessionStorage.getItem('chatMessages');
    if (sessionMessages) {
      return JSON.parse(sessionMessages);
    }
    // If no messages in sessionStorage but we have a summary, initialize with summary
    if (summary) {
      const initialMessage = {
        role: 'bot',
        content: `Paper Topic: ${sessionStorage.getItem('paperTopic') || ''}\n\nSummary:\n${summary || ''}`,
      };
      sessionStorage.setItem('chatMessages', JSON.stringify([initialMessage]));
      return [initialMessage];
    }
    return [];
  });
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [connectionStatus, setConnectionStatus] = useState('connected');
  const [isRecovering, setIsRecovering] = useState(false);
  const messagesEndRef = useRef(null);
  const paperTopic = sessionStorage.getItem('paperTopic');
  const inputRef = useRef(null);

  // Save messages to sessionStorage whenever they change
  useEffect(() => {
    if (messages.length > 0) {
      sessionStorage.setItem('chatMessages', JSON.stringify(messages));
    }
  }, [messages]);

  // Scroll to bottom when messages change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Initialize chat with summary if it's a new paper
  useEffect(() => {
    const hasExistingChat = sessionStorage.getItem('chatMessages');
    if (summary && !hasExistingChat) {
      const initialMessage = {
        role: 'bot',
        content: `Paper Topic: ${paperTopic || ''}\n\nSummary:\n${summary || ''}`,
      };
      setMessages([initialMessage]);
    }
  }, [summary, paperTopic]);
  
  // Check API connection status periodically
  useEffect(() => {
    const checkConnectionStatus = () => {
      const state = getConnectionState();
      setConnectionStatus(state.isConnected ? 'connected' : 'disconnected');
      setIsRecovering(state.isRecovering);
    };
    
    // Check immediately
    checkConnectionStatus();
    
    // Set up periodic checks
    const interval = setInterval(checkConnectionStatus, 5000);
    
    return () => clearInterval(interval);
  }, []);

  const handleSendMessage = async (e) => {
    e.preventDefault();
    
    if (!input.trim() || isLoading) return;
    
    // Check if connection is available
    if (connectionStatus === 'disconnected' && !isRecovering) {
      setError({
        message: 'API connection unavailable',
        suggestion: 'Please check your network connection and try again.',
        recoverable: true
      });
      return;
    }
      const userMessage = { role: 'user', content: input.trim() };
    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsLoading(true);
    setError(null);
    
    try {
      // Add a placeholder for the bot's response
      setMessages(prev => [...prev, { role: 'bot', content: '', isLoading: true }]);
      
      // Fetch the answer
      const response = await askQuestionWithRetry(userMessage.content, documentId);
      
      // Replace the placeholder with the actual response
      setMessages(prev => {
        const newMessages = [...prev];
        newMessages[newMessages.length - 1] = { 
          role: 'bot', 
          content: response.answer || 'I could not generate an answer for your question.',
          sources: response.sources
        };
        return newMessages;
      });
    } catch (err) {
      console.error('Error sending message:', err);
      
      // Remove the loading placeholder
      setMessages(prev => prev.filter(msg => !msg.isLoading));
      
      // Handle the error
      const errorInfo = handleApiError(err);
      setError(errorInfo);
      
      // Add an error message from the bot
      setMessages(prev => [
        ...prev, 
        { 
          role: 'bot', 
          content: `I encountered an error: \n\n${errorInfo?.message || 'Unknown error'}`,
          isError: true
        }
      ]);    } finally {
      setIsLoading(false);
      // Focus the input field after sending
      setTimeout(() => {
        inputRef.current?.focus();
      }, 100);
    }
  };

  const clearChat = () => {
    if (window.confirm('Are you sure you want to clear the chat history?')) {
      setMessages(summary ? [{
        role: 'bot',
        content: `Paper Topic: ${paperTopic || ''}\n\nSummary:\n${summary || ''}`,
      }] : []);
      sessionStorage.removeItem('chatMessages');
      setError(null);
    }
  };
  
  const attemptConnectionRecovery = async () => {
    setIsRecovering(true);
    try {
      const success = await recoverApiConnection();
      if (success) {
        setConnectionStatus('connected');
        setError(null);
      } else {
        setConnectionStatus('disconnected');
        setError({
          message: 'Connection recovery failed',
          suggestion: 'Please ensure the API server is running and try again later.',
          recoverable: true
        });
      }
    } catch (err) {
      console.error('Error recovering connection:', err);
      setError({
        message: 'Error recovering connection',
        suggestion: 'Please refresh the page and try again.',
        recoverable: false
      });
    } finally {
      setIsRecovering(false);
    }
  };

  return (
    <div className="chat-container">
      <div className="chat-header">
        <h2>Chat with the Document</h2>
        {messages.length > 0 && (
          <button onClick={clearChat} className="clear-chat-btn">
            <FaTrash /> Clear Chat
          </button>
        )}
      </div>
      
      {connectionStatus === 'disconnected' && (
        <div className="connection-alert">
          <FaExclamationTriangle /> API connection unavailable
          <button 
            onClick={attemptConnectionRecovery} 
            disabled={isRecovering}
            className="recovery-btn"
          >
            {isRecovering ? <FaSync className="spinning" /> : <FaSync />} 
            {isRecovering ? 'Reconnecting...' : 'Reconnect'}
          </button>
        </div>
      )}
      
      {error && error.message && !error.isHandled && (
        <div className="error-alert">
          <strong>Error:</strong> {error.message}
          {error.suggestion && <div><strong>Suggestion:</strong> {error.suggestion}</div>}
          {error.recoverable && (
            <button 
              onClick={attemptConnectionRecovery} 
              disabled={isRecovering}
              className="retry-btn"
            >
              {isRecovering ? 'Retrying...' : 'Retry Connection'}
            </button>
          )}
        </div>
      )}

      <div className="chat-messages">
        {messages.length === 0 && (
          <div className="empty-chat">
            <p>No messages yet. Start the conversation by asking a question about the document.</p>
          </div>
        )}
        
        {messages.map((message, index) => (
          <div key={index} className={`message ${message.role} ${message.isError ? 'error' : ''}`}>
            <div className="message-avatar">
              {message.role === 'user' ? <FaUserCircle /> : <FaRobot />}
            </div>
            <div className="message-content">
              {message.isLoading ? (
                <div className="typing-indicator">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              ) : (
                <div className="message-text">
                  {message.content.split('\n').map((line, i) => (
                    <React.Fragment key={i}>
                      {line}
                      <br />
                    </React.Fragment>
                  ))}
                  
                  {message.sources && message.sources.length > 0 && (
                    <div className="message-sources">
                      <strong>Sources:</strong>
                      <ul>
                        {message.sources.map((source, i) => (
                          <li key={i}>
                            {source.page_number && <span>Page {source.page_number}: </span>}
                            {source.text.length > 150 
                              ? `${source.text.substring(0, 150)}...` 
                              : source.text}
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
        ))}
        <div ref={messagesEndRef} />
      </div>

      <form onSubmit={handleSendMessage} className="chat-input-form">
        <input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder="Type your question here..."
          disabled={isLoading || connectionStatus === 'disconnected'}
          ref={inputRef}
        />
        <button 
          type="submit" 
          disabled={!input.trim() || isLoading || connectionStatus === 'disconnected'}
        >
          {isLoading ? 'Sending...' : 'Send'}
        </button>
      </form>
    </div>
  );
};

export default Chat;
